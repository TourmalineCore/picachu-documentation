@startuml C4_Elements
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
HIDE_STEREOTYPE()

AddElementTag("queue", $bgColor="Teal",$borderColor="black")
AddElementTag("exchange", $bgColor="SeaGreen",$shape=RoundedBoxShape())
AddElementTag("neural_network", $bgColor="DarkSlateGray")
AddElementTag("database", $bgColor="MediumSlateBlue",$borderColor="black")
AddElementTag("storage", $bgColor="LightSlateGray",$borderColor="black")
AddRelTag("event", $textColor="MediumVioletRed", $lineColor="MediumVioletRed")

Container(UI, "UI", "", "")
Container(API, "API", "", "")

ContainerQueue(ColorServiceQueue, "Color\nService\nQueue", "the system starts\n three queues\nfor each model\n1.ColorQueue\n2.EmotionQueue\n3.ObjectQueue}", "",$tags = "queue")

ContainerDb(S3, "S3", "", "",$tags="storage")
ContainerDb(DB, "DB_api", "", "",$tags="database")
ContainerDb(DB_tags, "DB_tags", "", "", $tags="database")
ContainerQueue(DelayedRetryQueue, "Delayed\nRetry\nQueue", "", "",  $tags = "queue")
Container(ColorService, "Color\nService", "the system starts\n three models\n1.ColorModel\n2.EmotionModel\n3.ObjectModel}", "",$tags="neural_network")

Container(RequestExchange, "Request\nExchange", "", "", $tags ="exchange")

Container(ModelsQueuesDLX, "Models\nQueuesDLX", "", "",$tags ="exchange")
Container(DelayedRetryQueueDLX, "Delayed\nRetry\nQueueDLX", "", "",$tags ="exchange")

Container(ResultService, "Result\nService", "", "")
ContainerQueue(ModelsDeterminedQueue, "Models\nDetermined\nQueue", "", "",$tags = "queue")

ContainerQueue(AssociationsQueue, "Associations\nQueue", "", "",$tags = "queue")
Container(AssociationsService, "Associations\nService", "", "",$tags="neural_network")

Container(UniquenessService, "Uniqueness\nService", "", "")
ContainerQueue(ModelsRecordedQueue, "Models\nRecorded\nQueue", "", "",$tags = "queue")
ContainerQueue(UniquenessRecordedQueue, "Uniqueness\nRecorded\nQueue", "", "",$tags = "queue")

Rel_D(UI, API, "EventNew\nPhotoReceived", "",$tags ="event")

Rel_U(API, UI, "Event\nInformation\nUpdated", "",$tags ="event")

Rel_D(API, RequestExchange, " ", "")
Rel_L(API, S3, "POST", "save photo")
Rel_U(API, DB, " ", "")
Rel_L(RequestExchange, ColorServiceQueue, "EventNew\nPhotoSaved", "",$tags ="event")
Rel_R(ColorService, ColorServiceQueue, "listen", "")
Rel_U(ColorService, S3, "GET", "photo")

Rel(ColorService, ModelsDeterminedQueue, "Event\nColors\nDetermined", "",$tags ="event")
Lay_U(ModelsDeterminedQueue,ColorServiceQueue)


Lay_U(AssociationsQueue,ColorServiceQueue)

Rel_R(AssociationsService, AssociationsQueue, "listen", "")

Lay_U(AssociationsService,ModelsQueuesDLX)
Lay_U(AssociationsService,ColorService)
Lay_U(DB_tags,RequestExchange)


Rel_D(ColorService, ModelsQueuesDLX, "on reject", "")
Rel_U(AssociationsService, ModelsQueuesDLX, "on reject", "")

Rel_L(ModelsQueuesDLX, DelayedRetryQueue, " ", "")
Rel_L(DelayedRetryQueue, DelayedRetryQueueDLX, " ", "")

Rel(DelayedRetryQueueDLX, ColorService, " ", "")

Lay_R(DelayedRetryQueueDLX,DelayedRetryQueue)
Lay_R(DelayedRetryQueue,ModelsQueuesDLX)
Lay_U(DelayedRetryQueueDLX,ColorService)

Rel(DelayedRetryQueueDLX, AssociationsService, " ", "")
Rel_U(AssociationsService, ModelsDeterminedQueue, "Event\nAssociations\nDetermined", "",$tags ="event")

Rel_L(ResultService, ModelsDeterminedQueue, "listen", "")

Rel_D(ResultService, AssociationsQueue, "Event\nEmotionAndObject\nDetermined", $tags ="event")
Rel_D(ResultService, DB_tags, " ", "")

Rel_R(ResultService, ModelsRecordedQueue, "EventColors\nRecorded", "",$tags ="event")
Rel_D(UniquenessService, ModelsRecordedQueue, "listen", "")

Rel_D(UniquenessService, ResultService, "GET", "tags from DB")

Rel_U(UniquenessService,UniquenessRecordedQueue ,  "EventColors\nUniquenessRecorded",$tags ="event")

Lay_U(UniquenessService,ModelsRecordedQueue)
Lay_R(RequestExchange,UniquenessService)

Rel_R(API, UniquenessRecordedQueue,  "listen", "")
Rel_R(API, ModelsRecordedQueue,  "listen", "")

Rel_U(UniquenessService,API ,  "GET", "gallery photos ids\nby source photo id")

SHOW_LEGEND(false)
@enduml